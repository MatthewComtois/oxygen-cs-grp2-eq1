name: Docker Image CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      database_name: oxygenCsGrp2Eq1E23Db
      database_user: root
      database_password: root

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.9'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install black pytest pytest-env pylint requests signalrcore python-dotenv mysql-connector-python
          pip install --user pipenv
          pipenv install
    - name: Set up MySQL
      run: |
        sudo /etc/init.d/mysql start
    - name: Verify MySQL connection from host
      run: |
        sudo apt-get install -y mysql-client
        mysql --host localhost --port 3306 -u${{ env.database_user }} -p${{ env.database_password }} -e "SHOW DATABASES"
    - name: Test with pytest
      run:  |
          pipenv run test
  analyseCode:
    runs-on: ubuntu-latest
    needs: test
    env:
      database_name: oxygenCsGrp2Eq1E23Db
      database_user: root
      database_password: root
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.9'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install black pytest pytest-env pylint requests signalrcore python-dotenv mysql-connector-python
    - name: Analyse de code statique et de formatage
      run:  |
          black .
          python lint.py -p src 

  build:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_SECRET }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags:  |
            ${{ secrets.DOCKER_USER }}/oxygencsgrp02eq1:latest
            ${{ secrets.DOCKER_USER }}/oxygencsgrp02eq1:${{github.run_number}}
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    #needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Create kubeconfig
      run: |
        mkdir ${HOME}/.kube
        echo ${{ secrets.KUBE_CONFIG }} | base64 --decode > ${HOME}/.kube/config
        cat ${HOME}/.kube/config
    - name: Use context
      run: kubectl config use-context gke_aesthetic-codex-388516_us-central1-c_log680-k8s
    - name: Deploy to K8s
      run:  |
          kubectl get pods
          kubectl apply -f oxygencs-deployment.yaml
          kubectl set image deployment/oxygencs-app oxygencs-app=mattcomtoisets/oxygencsgrp02eq1:${{github.run_number}}
          kubectl get pods
